
buildscript {
	repositories {
		ivy { url '../repository' }
		ivy { url 'http://unity-technologies.github.com/kaizen/repositories/unstable' }
		mavenCentral()
	}
	dependencies {
		classpath 'kaizen:kaizen:0.2.6'
	}
}

apply plugin: 'kaizen-bundle'
apply plugin: 'nunit'
apply plugin: 'idea'

allprojects {
  group = 'unityscript'
	version = '0.1.4'

	repositories {
		ivy { url 'http://unity-technologies.github.com/kaizen/repositories/unstable' }
	}
}

configurations {
	boo
}

ext {
	booVersion = '0.9.7'
}

dependencies {
	boo "boo:boo:$booVersion"
  boo "boo:RetargetAssembly:0.2.1"
	'default' project(':us'), project(':UnityScript'), project(':UnityScript.Lang')
}

unity.mono.booc.executable = file('lib/Boo/booc.exe')

project(':us') {
	dependencies {
		'default' project(':UnityScript'), project(':UnityScript.Lang')
		'default' "boo:Boo.Lang.Useful:$booVersion"
	}
	assembly {
		target = 'exe'
	}
}

project(':UnityScript') {
	dependencies {
		'default' project(':UnityScript.Lang')
		['Boo.Lang.Extensions', 'Boo.Lang.Parser', 'Boo.Lang.Compiler', 'Boo.Lang.PatternMatching', 'Boo.Lang.Useful'].each {
			'default' "boo:$it:$booVersion"
		}
	}
}

project(':UnityScript.Lang') {
  configurations {
    windowsPhone8
  }
  dependencies {
    'default' "boo:Boo.Lang:$booVersion"
    //windowsPhone8 group: 'boo', name: 'Boo.Lang', version: booVersion, configuration: 'windowsPhone8'
  }
  tasks.compileWindowsPhone8 {
    doLast {
      rootProject.exec {
        executable rootProject.extensions.unity.monoBleedingEdge.cli
        args 'lib/Boo/RetargetAssembly.exe'
        args assemblyFile
      }
    }
  }
}

project(':UnityScript.Tests.CSharp') {
	dependencies {
		'default' "boo:Boo.Lang:$booVersion"
	}
}

project(':UnityScript.Tests') {
	apply plugin: 'nunit-assembly'

	afterEvaluate {
		testDefault {
			exclude 'FailsOnMono'
		}
	}

	dependencies {
		[':UnityScript', ':UnityScript.Lang', ':us', ':UnityScript.Tests.CSharp'].each {
			'default' project(it)
		}
	}
}

def allCompileTasks = subprojects.collectMany { it.tasks }.findAll { it.name.startsWith('compile') }
def booCompileTasks = allCompileTasks.findAll { it.assembly.language == 'boo' }
booCompileTasks.each {
  logger.info "Configuring boo dependencies on $it"
  it.dependsOn rootProject.configurations.boo
  it.dependsOn rootProject.tasks.updateBoo
}

task publish {
  dependsOn configurations['default'].dependencies*.dependencyProject.uploadArchives
}

