<?xml version="1.0"?>
<project name="unityscript" default="all">

	<property name="java" value="java" />	
	<property name="build.dir" value="bin" />
	<property name="boo.dir" value="../boo" />
	<property name="boo.lib.dir" value="${boo.dir}/build" dynamic="true" />
	<property name="antlr.jar" value="${boo.dir}/lib/antlr-2.7.5/antlr-2.7.5.jar" />
	
	<property name="debug" value="true" />
	<property name="skip.verification" value="false" />
	<property name="disallow.system.dll.references" value="false" />
	
	<property name="mono" value="${'mono' == framework::get-family(framework::get-runtime-framework())}" />
	
	<include buildfile="${boo.dir}/tests/nunit.inc" />
	<property name="nunit-console" value="nunit-console" />
	<include buildfile="build.properties" if="${file::exists('build.properties')}" />
		
	<target name="set-release-configuration">
		<property name="debug" value="false" />
	</target>
	
	<target name="test" depends="all">
		<exec program="${nunit-console}" workingdir="${build.dir}" if="${mono}">
			<environment>
				<variable name="MONO_ENV_OPTIONS" value="--debug" />
			</environment>
			<arg value="-noshadow" />
			<arg value="-exclude:FailsOnMono" />
			<arg file="${build.dir}/UnityScript.Tests.dll" />
		</exec>
		
		<nunit2 unless="${mono}">
			<formatter type="Plain" />
			<test>
				<assemblies basedir="${build.dir}">				
					<include name="UnityScript.Tests.dll" />					
				</assemblies>
			</test>
		</nunit2>
	</target>
	
	<property name="nosign" value="false" />
	
	<target name="sign">
		<property name="keyfile.path" value="${boo.dir}/src/boo.snk" overwrite="false" />
	</target>

	<target name="nosign">
		<property name="keyfile.path" value="" overwrite="false" />
		<property name="nosign" value="true" overwrite="true" />
	</target>

	<target name="all" depends="UnityScript.Tests, prevent-system-references, verify-assemblies">
	</target>
	
	<target name="verify-assemblies" if="${mono}" unless="${skip.verification}">
		<foreach item="File" property="filename">
		<in>
			<items>
				<include name="${build.dir}/UnityScript*.dll" />
			</items>
		</in>
		<do>
			<exec program="pedump" workingdir="${build.dir}">
				<environment>
					<variable name="MONO_PATH" path="${build.dir}" />
				</environment>
				<arg line="--verify code" />
				<arg value="${path::get-file-name(filename)}" />
			</exec>
		</do>
		</foreach>
	</target>
	
	<target name="prevent-system-references" depends="init" if="${disallow.system.dll.references}">
		<boo src="prevent-system-references.boo" />
	</target>
	
	<target name="UnityScript.Tests" depends="refresh-tests, UnityScript, us">
		<csc
			target="library"
			output="${build.dir}/UnityScript.Tests.CSharp.dll"
			debug="true">
			
			<sources basedir="src/UnityScript.Tests.CSharp">
				<include name="**/*.cs" />
			</sources>
			<references basedir="${build.dir}">
				<include name="Boo.Lang.dll" />
			</references>
		</csc>
		
		<booc
			target="library"
			output="${build.dir}/UnityScript.Tests.dll"
			keyfile="${keyfile.path}"
			debug="true">
			<sources basedir="src/UnityScript.Tests">
				<include name="**/*.boo" />
			</sources>
			<references basedir="${build.dir}">
				<include name="us.exe" />
				<include name="UnityScript.dll" />
				<include name="UnityScript.Lang.dll" />
				<include name="UnityScript.Tests.CSharp.dll" />
				<include name="Boo.Lang.Useful.dll" />
				<include name="nunit.framework.dll" />
			</references>
		</booc>
	</target>
	
	<target name="refresh-tests" depends="init">
		<boo src="refresh-tests.boo">
			<references basedir="${build.dir}">
				<include name="Boo.Lang.PatternMatching.dll" />
			</references>
		</boo>
	</target>
	
	<target name="UnityScript" depends="init">
	
		<uptodate property="parser.uptodate">
			<sourcefiles basedir="src/UnityScript">
				<include name="UnityScript.g" />
			</sourcefiles>
			<targetfiles basedir="src/UnityScript/Parser">
				<include name="UnityScriptParser.boo" />
			</targetfiles>
		</uptodate>

		<if test="${not parser.uptodate}">
			<exec
				program="${java}"
				failonerror="true">				
				<arg value="-cp" />
				<arg value="${antlr.jar}" />
				<arg value="antlr.Tool" />
				<!-- <arg value="-traceParser" /> -->
				<arg value="-o" />
				<arg value="src/UnityScript/Parser" />
				<arg value="src/UnityScript/UnityScript.g" />
			</exec>
			<touch file="src/UnityScript/Parser/UnityScriptParser.boo" />
		</if>
		
		<booc
			target="library"
			output="${build.dir}/UnityScript.Lang.dll"
			debug="${debug}"
			keyfile="${keyfile.path}"
			noconfig="true">
			<sources basedir="src/UnityScript.Lang">
				<include name="**/*.boo" />
			</sources>
		</booc>
		
		<booc
			target="library"
			output="${build.dir}/UnityScript.dll"
			keyfile="${keyfile.path}"
			debug="${debug}">
			<sources basedir="src/UnityScript">
				<include name="**/*.boo" />
			</sources>
			<references basedir="${build.dir}">
				<include name="Boo.Lang.Parser.dll" />
				<include name="Boo.Lang.PatternMatching.dll" />
				<include name="UnityScript.Lang.dll" />
			</references>
		</booc>
	</target>
	
	<target name="us" depends="UnityScript">
		<booc
			output="${build.dir}/us.exe"
			target="exe"
			keyfile="${keyfile.path}"
			debug="${debug}">
			<sources basedir="src/us">
				<include name="*.boo" />
			</sources>
			<references basedir="${build.dir}">
				<include name="UnityScript.dll" />
				<include name="Boo.Lang.Useful.dll" />
			</references>
		</booc>
	</target>
	
	<target name="init">
		<call target="sign" unless="${nosign}" />
		<mkdir dir="${build.dir}" />
		<copy todir="${build.dir}">
			<fileset basedir="${boo.lib.dir}">
				<include name="Boo.Lang*.dll" />
				<include name="Boo.Lang*.pdb" />
				<include name="Boo.Lang*.mdb" />
			</fileset>
		</copy>
		<copy todir="${build.dir}" file="${nunit.framework.dll}" if="${file::exists(nunit.framework.dll)}" />
		<loadtasks assembly="${boo.lib.dir}/Boo.NAnt.Tasks.dll" />
	</target>
	
	<target name="clean">
		<delete dir="${build.dir}" if="${directory::exists(build.dir)}" />
	</target>
	
	<target name="rebuild" depends="clean, all" />
</project>
